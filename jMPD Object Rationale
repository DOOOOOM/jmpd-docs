Database Class
This class will serve as a capsule to handle functionalities related to database manipulation (accessing, adding, modifying and removing records, creating new tables etc.) as well as attributes of the database(s) that will be used throughout program execution.	

FileSystemScanner Class
This class will take care of functionalities that will allow us to scan some specific directories, looking for configurations files, playlists, music files, or changes made to the default directory where the music is stored.	

MetadataExtractor Class
In this class, we will define functionalities that will allow the server to extract information from the ID3 tags(see jargon dictionary) inside the mp3 files that will be manipulated in the music library. It will help retrieve such information as song name, artist name, duration etc. for any given mp3 file.

JsonParser Class
This class will store attributes about the “messages” that will sent by the client to the server. It will handle functionalities such as decoding the message and any parameters or restrictions associated with it.	

DaemonMainController Class
This class will handle the configuration file and all the commands to the daemon.

Player Class
In this class we will define functionalities that will allow playback of the songs in the application (play, pause, next rack, previous track etc.)	

Playlist Class
This class will encapsulate attributes of any given playlist which will be the songs that it contains, as well as the order in which they appear in the list.	

Track Class
This class will encapsulate information about database elements such as the track ID associated with each song in the database, or the metadata of the track as defined in the database specification.

TrackList Class
This class handles the tracklist objects.

ArtExtractor Class
In this class will be defined functionalities to help retrieve the album art of a song, to be displayed in the client’s GUI.	

LyricsFetcher Class
The purpose of this class is to look for the lyrics (see jargon dictionary) on the web, given the artist name and song name.	

DaemonConnectionController Class
This class will define procedures that will allow the communication between the client module and the server module of the application, such as specifying the host address, port number to use etc from the daemon side.

ClientConnectionController Class
This class will define procedures that will allow the communication between the client module and the server module of the application, such as specifying the host address, port number to use etc from the client side.

MainViewController Class
This class will encapsulate the elements of the major part of the client’s GUI. Information such as the artist name of the song in playback, title of the song in playback and any other song label will be displayed through that construct.

Message Class
This class will define the format of the object that will be send as communication tools between the client and the server.
